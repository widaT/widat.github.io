[{"authors":[],"categories":[{"title":"Golang","url":"/categories/golang/"}],"content":"超高连接数场景下，越来越多的第三方库开始使用裸的epoll来实现，相继出现了Evio,Gnet和本系列主要讨论的Netpoll。\n随着Go语言的运用越来越广，Go原生的net组件在一些场景下逐渐开始乏力。比如一个需要超高连接数服务的场景下，我们如果使用Go自动的net库，每一个新Client Go net库会分配一个goroutine。我们知道goroutine的默认栈是2k，在超大连接数等于有超高的goroutine，会产生很大的内存占用。而且超多的goroutine会让go调度器调度难度增大。\n为了解决这个问题，Go社区里开始出现了抛开go原生net，使用裸epoll的解决方案。比较受欢迎的有evio,gnet,以及本系列专栏想讨论的字节跳动开源的netpoll。\n在Go中如何使用裸的epoll？§ 1m-go-websockets 这个项目有比较简洁易懂的代码实现。也可以参考笔者的练手项目poller。\nReactor模型§ epoll最终反馈到用户态的是一个事件数组，我们根据事件数组处理各个事件，这种基于事件的处理模型我们称之为Reactor模型。\nNetpoll§ Netpoll是字节开源的基于Reactor模型的纯golang实现的网络库。字节基于Netpoll开发出了KitexRPC框架和Hertzhttp框架，从官方的基准测试结果来看，其性能还是比较出众的。\nNetpoll 核心组件§ LinkBuffer提供可以流式读写的 nocopy API gopool 提供高性能的goroutine池 mcache 提供高效的内存复用 本系列会从Netpoll源码角度分析，Netpoll的实现细节。\n","date":"January 9, 2023","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/netpoll/overview/","series":[{"title":"Netpoll","url":"/series/netpoll/"}],"smallImg":"","tags":[{"title":"Golang","url":"/tags/golang/"},{"title":"Netpoll","url":"/tags/netpoll/"}],"timestamp":1673224988,"title":"Netpoll介绍"},{"authors":[],"categories":[{"title":"Blockchain","url":"/categories/blockchain/"}],"content":"在B站看北京大学肖臻老师《区块链技术与应用》公开课。这边做一下学习笔记，这一节肖老师介绍BTC中的脚本语言。\n词条§ P2pk（Pay to Public key) P2PKH (Pay to Public key Hash) P2SH (Pay to Script Hash) Proof of Burn Alternative Coin state fork forking attack protocal fork hard fork soft fork BTC脚本语言§ BTC脚本语言只能访问栈，没有局部变量和全局变量.\nBTC分叉§ 硬分叉\nBTC协议新特性导致btc要升级，社区中不同意见导致硬分叉。\n软分叉\n临时性的分叉。\n","date":"December 8, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/blockchain_script/","series":[{"title":"Blockchain","url":"/series/blockchain/"}],"smallImg":"","tags":[{"title":"Blockchain","url":"/tags/blockchain/"}],"timestamp":1670470273,"title":"区块链学习--BTC中的脚本语言和分叉"},{"authors":[],"categories":[{"title":"Blockchain","url":"/categories/blockchain/"}],"content":"在B站看北京大学肖臻老师《区块链技术与应用》公开课。这边做一下学习笔记，这一节肖老师介绍BTC挖矿。\n词条§ 51% attack BTC挖矿§ BTC挖矿指的是不断调整block header中 nonce，使得 block header的hash值小于等于给定的目标阈值(H(block header) \u0026lt;= target)。\nH(block header) \u0026lt;= target,BTC使用 sha256 hash算法。\nBTC出块难度§ BTC为什么要调出块难度？\u0026ndash; 随着旷工越来阅读，算力越来越强，出块时间会越来越短。\n出块时间越短会有什么问题？ \u0026ndash; BTC会大量的分叉，系统的总算力会分散，系统的共识有难度。\nBTC的出块时间是10分钟。\nBTC每出2016个块（大概14天)会调整出块难度，调整出块难道的代码是写在btc的代码里头。\n矿池§ 矿池解决收益不稳定的问题。 矿池会降低挖矿难度，旷工挖到类似难度的nonce，提交到矿主，用来做工作量证明。\n","date":"December 7, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/blockchain_wknd/","series":[{"title":"Blockchain","url":"/series/blockchain/"}],"smallImg":"","tags":[{"title":"Blockchain","url":"/tags/blockchain/"}],"timestamp":1670416692,"title":"区块链学习--BTC挖矿"},{"authors":[],"categories":[{"title":"Blockchain","url":"/categories/blockchain/"}],"content":"在B站看北京大学肖臻老师《区块链技术与应用》公开课。这边做一下学习笔记，这一节肖老师介绍BTC网络。\n词条§ The BitCoin Network Super Node Master Node Seed Node simple robust ，but not efficient flooding best effort BTC 架构§ application layer: BTC block chain ------------------------------ network layer: P2P overlay network BTC 节点§ BTC网络所有的节点是对等的，没有超级节点。在BTC网络中至少要一个种子节点（Seed node），它会告知它知道的BTC节点。节点间使用TCP链接，离开的时候不用通知其他节点，过一段时间别的节点没有你的消息会把离线节点删除。\nBTC网络特点§ 简单 鲁棒性 效率较低 每个节点维护一个邻居节点集合，消息传播采取flooding方式，节点收到消息会传播给所以邻居节点，同时记录该消息已经接收过了。 邻居节点的选举是随机的，不是拓扑结构，也不是物理距离，这样设计的目的是增强鲁棒性。\nBTC中每个节点维护一个等待上链的交易集合，当节点收到一个交易信息，先验证交易合法性，然后会广播给邻居节点，如果消息收到过，会记录，且不会转发给邻居节点。\nBTC区块发布和交易发布类似，BTC block大小有1M限制。\n","date":"December 7, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/blockchain_network/","series":[{"title":"Blockchain","url":"/series/blockchain/"}],"smallImg":"","tags":[{"title":"Blockchain","url":"/tags/blockchain/"}],"timestamp":1670384067,"title":"区块链学习--BTC网络"},{"authors":[],"categories":[{"title":"Blockchain","url":"/categories/blockchain/"}],"content":"在B站看北京大学肖臻老师《区块链技术与应用》公开课。这边做一下学习笔记，这一节肖老师介绍，BTC的实现。\n词条§ transaction-base ledger UTXO: unspent transaction output total inputs = total outps transaction fee accout-base ledger Bernoulli trial: a random experiment with binary outcome Bernoulli process: a sequence of independent Bernoulli trial memoryless Poisson process Bitcoin is sucured by mining selfish mining UTXO§ utxo的作用验证币在谁手里。\nbtc平均10分钟出一个块，平均4年出块奖励减半。\nBTC§ btc所有总量为2100w。\nBTC安全§ 恶意节点是否能伪造交易 \u0026ndash; 不能A-\u0026gt;M需要A的签名。 恶意节点是否能对一个B发两次 \u0026ndash; 可以多等几个区块确认（BTC需要6个块，大概需要1个小时） ","date":"December 6, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/blockchain_sx/","series":[{"title":"Blockchain","url":"/series/blockchain/"}],"smallImg":"","tags":[{"title":"Blockchain","url":"/tags/blockchain/"}],"timestamp":1670334223,"title":"区块链学习--BTC实现"},{"authors":[],"categories":[{"title":"Blockchain","url":"/categories/blockchain/"}],"content":"在B站看北京大学肖臻老师《区块链技术与应用》公开课。这边做一下学习笔记，这一节肖老师介绍，BTC中协议。\n词条§ double spending attack create coin （铸币交易） coinbase transaction bitcoin script distributed consensus distributed hash table impossibility result CAP theorem Paxos consensus in Bitcoin sybil attack (女巫攻击) longest valid chain forking attack orphan block block reward 思考§ 央行用央行的私钥签发一个100元数字货币，普通人用央行的公钥去验证真伪。这样的货币是否可行？ \u0026ndash; 不可行，存在双发攻击（double spending attack），数字货币不能伪造，但是可以被复制，这样就可以发多次。\n上面的法案加上每个数字货币有编号在央行记录每个编号在谁手里，支付的时候到央行确认。 \u0026ndash; 方案可行，但是每次交易都要央行确认太繁琐。\n有没有办法解决每次要和央行确认的中心化方式 ，而又可以解决，双花攻击的问题？ \u0026ndash; 区块链可以，区块链可以追踪一个币的所有交易。\nBTC的交易过程§ BTC交易包含两个部分，输出和输入，输入部分需要币的来源，输出部分需要给出收款人公钥的hash。在链上除了指向上一个区块的hash指针，还有指向前面某个交易的hash指针，来说明币的来源，这样子可以防止double spending。\n转账交易,A需要有签名，还要给出公钥，还需要有B的地址。BTC中没有直接找到某人的地址的功能。B要知道A的公钥，区块链都需要知道A的公钥，用公钥计算出hash和来源的输出部分hash要一致，这个过程使用btc脚本验证。\n区块结构§ Block Header\nrevsion hash of previous block header merkle root hash target nonce Block Body\ntransaction list 取hash只需要对Block header 取hash就可以。\nBTC中的共识协议§ BTC中假设大部分节点是合法的。\nBTC使用算力投票机制，H(block header)\u0026lt;= target，只有取得规范的Hash值，节点才有记账权，由于取得合法区块比较难，Btc出块通常比较慢。\nBTC要求在最长合法链上接收区块。\n当两个节点同时发布一个合法区块，这样子的区块会保持一段时间，当下一个区块出来，最长的链会保持，另外一个会丢弃。\n出块奖励§ 每过21w区块，出块奖励就减半。\n","date":"December 6, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/blockchain_xy/","series":[{"title":"Blockchain","url":"/series/blockchain/"}],"smallImg":"","tags":[{"title":"Blockchain","url":"/tags/blockchain/"}],"timestamp":1670301424,"title":"区块链学习--BTC中协议"},{"authors":[],"categories":[{"title":"Blockchain","url":"/categories/blockchain/"}],"content":"在B站看北京大学肖臻老师《区块链技术与应用》公开课。这边做一下学习笔记，这一节肖老师介绍BTC中的数据结构。\n词条§ hash pointers genesis block most recent block Merkle tree binary tree merkle proof sorted merkle tree Hash指针§ Hash指针除了存结构体地址，还有存结构体的hash值。这样子可以不仅仅可以找到结构体位置，判断结构体是否被修改。\nBTC是区块链，使用Hash指针代替普通指针。区块链上任何block内容发生变化，后面的指针就会对不上。\n最后一个block的hash值，就可以检查之前链上的区块是不是有变化。\nMerkle tree§ Merkle tree 最底层是data blocks，上层是hash pointers。 根hash值就可以检测block上的内容是否被修改。\n每一个区块分为， block header和block body。 block header只存储根hash值。\nMerkle tree可以提供Merkle proof。\nBTC分轻节点和全节点，轻节点只保存block header.轻节点验证交易需要使用merkle proof，轻节点向任意一个全节点请求验证，全节点返回相应hash指针，轻节点从下往上验证 hash值，直到根节点hash值和block header的值一样，才能证明交易在某个block中。\nHash指针§ Hash指针需要有向无环，有环的会有循环依赖问题。\n","date":"December 5, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/blockchain_sjjg/","series":[{"title":"Blockchain","url":"/series/blockchain/"}],"smallImg":"","tags":[{"title":"Blockchain","url":"/tags/blockchain/"}],"timestamp":1670215233,"title":"区块链学习--BTC中的数据结构"},{"authors":[],"categories":[{"title":"Blockchain","url":"/categories/blockchain/"}],"content":"在B站看北京大学肖臻老师《区块链技术与应用》公开课。这边做一下学习笔记，这一节肖老师介绍，BTC的密码学原理。\n词条§ crypto-currency cryptographic hash fuction collision resistance burte-force hiding digital commitment(digital equivalent of a sealed envelope) puzzle friendly difficult to solve,but easy to verify Hash§ Btc利用的密码学原理有两个功能，一个是hash，另一个是签名。\nHash三特性\ncollision resistance\nHash碰撞不可避免，输入空间远远大于输出空间，例如256hash，输出空间为2的256次方，输入空间可以是无限。 collision resistance不是说不会发生hash碰撞，而是说不能人为制造碰撞。\nhiding x-\u0026gt;H(x)过程的单向的，无法通过H(x)推算出x。 hiding特性需要输入空间足够大，而且取值结果要足够均匀，使得蛮力求解计算量非常大。\nhiding和collision resistance 可以实现digital equivalent of a sealed envelope，可以预测一个内容，把内容hash，公布hash值，然后后面来验证预测结果。hash值可以保证预测的内容不可能被篡改，预测内容在验证前也不会有人知道。\n如果输入空间不够大，可以使用拼接随机数方案H(x||nonce)\npuzzle friendly\n一个输入不好预测输出结果，你只能一个一个算。如何你先得等前面7个0的hash，你想知道什么样的输入满足这样的hash结果，其实无法实现，只能一个一个去实验，没有捷径。\n签名§ Btc中的账户管理：创立(public key ,private key)公私钥对。\n加密用公钥，解密使用私钥。\nbtc账户签名用的是私钥，验证用的是公钥。\n","date":"December 4, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/blockchain_mmxyl/","series":[{"title":"Blockchain","url":"/series/blockchain/"}],"smallImg":"","tags":[{"title":"Blockchain","url":"/tags/blockchain/"}],"timestamp":1670161173,"title":"区块链学习--BTC中的密码学原理"},{"authors":[],"categories":[{"title":"Hugo","url":"/categories/hugo/"}],"content":"最近一两个月开始研究Hugo，有点心得和大家分享下。\nHugo是基于Go开发的静态网站生成工具，相较于传统的cms的网站管理和生成方式相比，Hugo没有依赖数据库，它的数据来自配置文件和markdown文档.\nHugo现在最场景的场景是用在个人Blog搭建，导航类网站搭建。本人的Blog就是基于Hugo搭建的，另外本来还用Hugo开始批量制作了一批导航站群。\nHugo的优点§ Hugo简单低代码，生成静态文件速度快\n使用hugo基本上写很少的代码，基本上就是维护配置文件和维护markdown文档。\nHugo静态站低成本\n因为生成静态网站，你部署的时候非常简单，直接把整个生成的文件夹部署到线上即可。如果你没有自己的服务器，你可以免费部署在Github netlify上，netlify不限制网站数量，如果你有自己的域名还可以绑定自己的域名，非常方便。\nHugo目前有些不错主题\nHugo的主题相较于Wordpress那是少好几个数量级，但是现在已经有一些比较好用的Blog主题和一些好用的导航站主题，对我来说这些已经够用了。如果有同学对我的Blog主题感兴趣或者对我的导航站主题感兴趣，可以加我微信联系我。\nHugo的缺点§ 使用的场景比较少\nHugo的缺点也很明细，就是所有的数据需要自己组织，没有数据库，没有管理后台，无法做到大规模编辑提交和发布，更无法做到传统cms那样子权限管理，和审核机制。\n做大型静态站比较力不从心\nHugo的页面生成基于Go的template语法，每一个页面都需要一个模板，一般情况下主题会提供这类模板。如果你做大型静态站，还要考虑数据源的格式，然后根据数据源格式定制各种模板，相较于传统cms固定的数据源格式，Hugo这个步骤相当繁琐。\n","date":"November 28, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/hugo/","series":[{"title":"Hugo","url":"/series/hugo/"}],"smallImg":"","tags":[{"title":"Hugo","url":"/tags/hugo/"}],"timestamp":1669642773,"title":"Hugo"},{"authors":[],"categories":[],"content":"以前零零散散写过一点东西，但是都没有自己整一个Blog的想法。\n可能上了点年龄，预感可能是程序员生涯的尾声，\n准备写点东西，算是对自己技术的一个沉淀。算是对得起自己的程序员生涯。\n","date":"November 27, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/blog/readme/","series":[],"smallImg":"","tags":[{"title":"聊天","url":"/tags/%E8%81%8A%E5%A4%A9/"}],"timestamp":1669538129,"title":"今天开始写博客"},{"authors":[],"categories":[],"content":"一个混迹在魔都的10多年经验的后端程序员。\n联系我§ mail: wida59@gmail.com wechat：widaWX(注明来意) Discord: https://discord.com/invite/F9Nm9zwH ","date":"November 27, 2022","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/about/","series":[],"smallImg":"","tags":[],"timestamp":1669507200,"title":"About"},{"authors":[],"categories":[],"content":"联系我§ mail: wida59@gmail.com wechat：widaWX(注明来意) Discord: https://discord.com/invite/F9Nm9zwH ","date":"January 1, 1","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/contact/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Contact Us"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/offline/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"}]
